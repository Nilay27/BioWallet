import { circle, encoding } from "@wormhole-foundation/sdk-base";
import {
  serializePayload,
  deserializePayload,
  serialize,
  deserialize,
} from "./../src/vaa/index.js";
import "../src/protocols/relayer/index.js";

//monkey-patch to allow stringifying BigInts
(BigInt.prototype as any).toJSON = function () {
  return this.toString();
};

//log taken from here: https://moonbeam.moonscan.io/tx/0x6a2c36673e8cbbef29cc3bad4eabfb8edb0851c0d27defba300f80561ccecec6
const deliveryInstructionPayload =
  "0x

//taken from here: https://goerli-optimism.etherscan.io/tx/0x820e844f904f9056cda7c97bf300066a1414839838e529c11d1926859969d84a
const deliveryInstructionVAAwithCCTP =
  "0x010000000001000ce91f7038aa606fd1619311376d4034c896e03f43a058b0c91acdc00f7540d141747a2606941d3eb2a8269e95bc460c1dc4225270adf6fb10364bb907942bb200653fde10000000000006000000000000000000000000a3cf45939bd6260bcfe3d66bc73d60f19e49a8bb000000000000296c0f01001800000000000000000000000076808da73fd9de0680bedb3d8f8778b4d20686e7000000800000000000000000000000000000000000000000000000000000000000005f0700000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000cc8930c26e6e2428b7b4a84578426eee61eeeeac00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d09000000000000000000000000000000000000000000000000000000006a6fd66db00180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060a86b97a7596ebfd25fb769053894ed0d9a8366000000000000000000000000af07c856b87ac977c57116728941f178f80e0dba01020000000c000000010000000000048e98";

describe("Relayer Payload serialization tests", function () {
  it("DeliveryInstruction", function () {
    const payload = deserializePayload("Relayer:DeliveryInstruction", deliveryInstructionPayload);
    expect(payload.target.chain).toBe("Polygon");
    expect(payload.refund.chain).toBe("Polygon");
    const encoded = serializePayload("Relayer:DeliveryInstruction", payload);
    expect(encoded).toEqual(encoding.hex.decode(deliveryInstructionPayload));
  });

  it("DeliveryInstruction with a CCTP message key", function () {
    const vaa = deserialize("Relayer:DeliveryInstruction", deliveryInstructionVAAwithCCTP);
    expect(vaa.emitterChain).toBe("Avalanche");
    expect(vaa.payload.target.chain).toBe("Optimism");
    expect(vaa.payload.refund.chain).toBe("Optimism");
    expect(vaa.payload.messageKeys.length).toBe(1);
    expect(vaa.payload.messageKeys[0]!.keyType).toBe("CCTP");

    const circleDomain = circle.circleChainId("Testnet", "Avalanche");

    if (vaa.payload.messageKeys[0]!.keyType === "CCTP") {
      expect(vaa.payload.messageKeys[0]!.domain).toBe(circleDomain);
      expect(vaa.payload.messageKeys[0]!.nonce).toBe(298648n);
    }
    const encoded = serialize(vaa);
    expect(encoded).toEqual(encoding.hex.decode(deliveryInstructionVAAwithCCTP));
  });
});
